{"version":3,"sources":["hooks/useArrayGenerator.js","SortingAlgorithms/Quicksort.js","SortingAlgorithms/Mergesort.js","SortingAlgorithms/Heapsort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/Bubblesort.js","SortingAlgorithms/Selectsort.js","SortingAlgorithms/Insertionsort.js","App.js","reportWebVitals.js","index.js"],"names":["useArrayGenerator","useState","size","setSize","array","array1","array2","blindarray","useLayoutEffect","updateSize","width","height","array_","array1_","array2_","blindarray_","i","push","randomIntFromInterval","generateRandomArray","window","innerWidth","innerHeight","addEventListener","min","max","Math","floor","random","quickSortHelper","startIdx","endIdx","animations","leftIdx","rightIdx","pivot","mergeSortHelper","mainArray","auxiliaryArray","middleIdx","doMerge","k","j","heapSortHelper","rootIdx","maxChildIdx","tmp","SortingVisualizer","isClicked","setIsClicked","onClickSwitch","isSorting","setIsSorting","startSort","items","chosenSort","setSelectSort","chosenSort1","setSelectSort1","chosenSort2","setSelectSort2","className","onClick","disabled","value","onChange","e","target","map","item","sortVisualize","location","reload","idx","style","sortType","array_bar_","length","getBubbleSortAnimations","midx","getSelectSortAnimations","getInsertionSortAnimations","getQuickSortAnimations","getMergeSortAnimations","getHeapSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdxOrNewHeight","type","colorType","barOneStyle","barTwoStyle","color","setTimeout","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.56879d23.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\nexport const useArrayGenerator = () => {\n    const [size, setSize] = useState([0, [], [], [], []]);\n\n    let array = [];\n    let array1 = [];\n    let array2 = [];\n    let blindarray = [];\n\n    const generateRandomArray = (width, height) => {\n        const array_ = [];\n        const array1_ = [];\n        const array2_ = [];\n        const blindarray_ = [];\n        \n        for (let i = 0; i < width/10 ; i++) \n            array_.push(randomIntFromInterval(5, 7*height/10));\n        \n        for (let i = 0; i < width/20 ; i++) \n            array1_.push(randomIntFromInterval(5, 7*height/10));\n        \n        for (let i = 0; i < width/20 ; i++) \n            array2_.push(array1_[i]);\n    \n        blindarray_.push(8*height/10);\n    \n        array = array_;\n        array1 = array1_;\n        array2 = array2_;\n        blindarray = blindarray_;\n    }\n\n    useLayoutEffect(() => {\n        const updateSize = () => {\n            generateRandomArray(window.innerWidth, window.innerHeight);\n            setSize([window.innerWidth, array, array1, array2, blindarray]); \n        };\n        window.addEventListener('resize', updateSize);\n        updateSize();\n        \n        return () => window.addEventListener('resize', updateSize);\n    }, []);\n    return size;\n}\n\nconst randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export const getQuickSortAnimations = (array) => {\n    const animations = [];\n    const array_ = [...array];\n    if (array.length <= 1) return array;\n    quickSortHelper(array_, 0, array_.length - 1, animations);\n    return animations;\n}\n  \nconst quickSortHelper = (\n    array,\n    startIdx,\n    endIdx,\n    animations,\n) => {\n    if (startIdx === endIdx) return;\n    let leftIdx = startIdx;\n    let rightIdx = endIdx;\n    let pivot = array[leftIdx];\n    while (leftIdx < rightIdx) {\n        while ((array[rightIdx] >= pivot) && (leftIdx < rightIdx)) {\n            animations.push([rightIdx, leftIdx, \"color\", \"even\"]);\n            animations.push([rightIdx, leftIdx, \"color\", \"odd\"]);\n            rightIdx--;\n        }\n        if (leftIdx != rightIdx) {\n            array[leftIdx] = array[rightIdx];\n            animations.push([leftIdx, array[leftIdx], \"swap\", \"null\"]);\n            leftIdx++;\n        }\n\n        while ((array[leftIdx] <= pivot) && (leftIdx < rightIdx)) {\n            animations.push([leftIdx, leftIdx, \"color\", \"even\"]);\n            animations.push([leftIdx, leftIdx, \"color\", \"odd\"]);\n            leftIdx++;\n        }\n        if (leftIdx != rightIdx) {\n            array[rightIdx] = array[leftIdx];\n            animations.push([rightIdx, array[rightIdx], \"swap\", \"null\"]);\n            rightIdx--; \n        }  \n    }\n\n    array[leftIdx] = pivot;\n    animations.push([leftIdx, array[leftIdx], \"swap\", \"null\"]);\n    pivot = leftIdx\n\n    if (startIdx < pivot) quickSortHelper(array, startIdx, pivot - 1, animations);\n    if (endIdx > pivot) quickSortHelper(array, pivot + 1, endIdx, animations);\n}","export const getMergeSortAnimations = (array) => {\n    const animations = [];\n    const array_ = [...array];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = [...array_];\n    mergeSortHelper(array_, 0, array_.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nconst mergeSortHelper = (\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) => {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nconst doMerge = (\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) => {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j, \"color\", \"even\"]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j, \"color\", \"odd\"]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i], \"swap\", \"null\"]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push([k, auxiliaryArray[j], \"swap\", \"null\"]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        animations.push([i, i, \"color\", \"even\"]);\n        animations.push([i, i, \"color\", \"odd\"]);\n        animations.push([k, auxiliaryArray[i], \"swap\", \"null\"]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        animations.push([j, j, \"color\", \"even\"]);\n        animations.push([j, j, \"color\", \"odd\"]);\n        animations.push([k, auxiliaryArray[j], \"swap\", \"null\"]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}","export const getHeapSortAnimations = (array) => {\n    const animations = [];\n    const array_ = [...array];\n    if (array.length <= 1) return array;\n    for (let i = array_.length / 2 - 1; i >= 0; i--) \n        heapSortHelper(array_, i, array_.length, animations);\n    \n    for (let i = array_.length - 1; i > 0; i--) {\n        let tmp = array_[0];\n        array_[0] = array_[i];\n        array_[i] = tmp;\n\n        animations.push([0, array_[0], \"swap\", \"null\"]);\n        animations.push([i, array_[i], \"swap\", \"null\"]);\n\n        heapSortHelper(array_, 0, i, animations);\n    }\n\n    return animations;\n}\n  \nconst heapSortHelper = (\n    array,\n    rootIdx,\n    endIdx,\n    animations,\n) => {\n    let leftIdx = 2 * rootIdx + 1;\n    let rightIdx = 2 * rootIdx + 2;\n    let maxChildIdx = rootIdx;\n    \n    \n    if (leftIdx < endIdx ) {\n        animations.push([rootIdx, leftIdx, \"color\", \"even\"]);\n        animations.push([rootIdx, leftIdx, \"color\", \"odd\"]);\n        if( array[leftIdx] > array[rootIdx]) maxChildIdx = leftIdx;\n    }\n    \n    if (rightIdx < endIdx ) {\n        animations.push([maxChildIdx, rightIdx, \"color\", \"even\"]);\n        animations.push([maxChildIdx, rightIdx, \"color\", \"odd\"]);\n        if( array[rightIdx] > array[maxChildIdx]) maxChildIdx = rightIdx;\n    }\n\n    if (maxChildIdx !== rootIdx) {\n        let tmp = array[rootIdx];\n        array[rootIdx] = array[maxChildIdx];\n        array[maxChildIdx] = tmp;\n\n        animations.push([rootIdx, array[rootIdx], \"swap\", \"null\"]);\n        animations.push([maxChildIdx, array[maxChildIdx], \"swap\", \"null\"]);\n\n        heapSortHelper(array, maxChildIdx, endIdx, animations);\n    }\n}","import { React, useState } from 'react';\nimport './SortingVisualizer.css';\n\n// Array\nimport { useArrayGenerator } from '../hooks/useArrayGenerator';\n\n// Sort\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/Bubblesort';\nimport { getSelectSortAnimations } from '../SortingAlgorithms/Selectsort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/Insertionsort';\nimport { getQuickSortAnimations } from '../SortingAlgorithms/Quicksort';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/Mergesort';\nimport { getHeapSortAnimations } from '../SortingAlgorithms/Heapsort';\n\nexport const SortingVisualizer = () => {\n    const [isClicked, setIsClicked] = useState(true);\n    const onClickSwitch = () => setIsClicked(!isClicked);\n    const [isSorting, setIsSorting] = useState(false);\n    const startSort = () => setIsSorting(true);\n\n    const [width, array, array1, array2, blindarray] = useArrayGenerator();\n    \n    const items = [\"Bubble Sort\", \"Select Sort\", \"Insertion Sort\", \"Quick Sort\", \"Merge Sort\", \"Heap Sort\"];\n    const [chosenSort, setSelectSort] = useState(\"Bubble Sort\");\n    const handleChange = (e) => setSelectSort(e.target.value);\n    const [chosenSort1, setSelectSort1] = useState(\"Bubble Sort\");\n    const handleChange1 = (e) => setSelectSort1(e.target.value);\n    const [chosenSort2, setSelectSort2] = useState(\"Bubble Sort\");\n    const handleChange2 = (e) => setSelectSort2(e.target.value);\n\n    const doSortSingle = () => {\n        startSort();\n        sortVisualize(chosenSort, array, \"array-bar\");\n    } \n\n    const doSortCompare = () => {\n        startSort();\n        sortVisualize(chosenSort1, array1, \"array-bar1\");\n        sortVisualize(chosenSort2, array2, \"array-bar2\");\n    } \n\n    // Output\n    return (\n        <>\n            <p className=\"text\">How to simulate : Choose Sorttype -> Sort (-> Reset)</p>\n            { isClicked ? (\n                <>\n                    <div className=\"container\">\n                        <button className=\"button\" onClick={onClickSwitch} disabled={isSorting}>Compare Sort</button>\n                        <select className=\"button\" value={chosenSort} onChange={handleChange}>\n                            {items.map((item) => (\n                                <option key={item} value={item}>\n                                    {item}\n                                </option>\n                            ))}\n                        </select>\n                        <button className=\"button\" onClick={doSortSingle} disabled={isSorting}>Sort</button>\n                        <button className=\"button\" onClick={() => window.location.reload()}>Reset</button>\n                    </div>\n                    <div className=\"array-container\">\n                        {array.map((value, idx) => (\n                            <div \n                                className=\"array-bar\" \n                                key={idx}\n                                style={{height: `${value}px`}}\n                            ></div>\n                        ))}\n                        {blindarray.map((value, idx) => (\n                            <div\n                                className=\"blind-array-bar\" \n                                key={idx}\n                                style={{\n                                    height: `${value}px`,\n                                    width: `1px`\n                                }}\n                            ></div>\n                        ))}\n                    </div>\n                </>\n            ) : (\n                <>\n                    <div className=\"container\">\n                        <button className=\"button\" onClick={onClickSwitch} disabled={isSorting}>Single Sort</button>\n                        <select className=\"button\" value={chosenSort1} onChange={handleChange1}>\n                            {items.map((item) => (\n                                <option key={item} value={item}>\n                                    Left : {item}\n                                </option>\n                            ))}\n                        </select>\n                        <select className=\"button\" value={chosenSort2} onChange={handleChange2}>\n                            {items.map((item) => (\n                                <option key={item} value={item}>\n                                    Right : {item}\n                                </option>\n                            ))}\n                        </select>\n                        <button className=\"button\" onClick={doSortCompare} disabled={isSorting}>Compare</button>\n                        <button className=\"button\" onClick={() => window.location.reload()}>Reset</button>\n                    </div>\n                    <div className=\"array-container\">\n                        {array1.map((value, idx) => (\n                            <div \n                                className=\"array-bar1\" \n                                key={idx}\n                                style={{height: `${value}px`}}\n                            ></div>\n                        ))}\n                        {blindarray.map((value, idx) => (\n                            <div\n                                className=\"blind-array-bar\" \n                                key={idx}\n                                style={{\n                                    height: `${value}px`,\n                                    width: `${width/10}px`\n                                }}\n                            ></div>\n                        ))}\n                        {array2.map((value, idx) => (\n                            <div \n                                className=\"array-bar2\" \n                                key={idx}\n                                style={{height: `${value}px`}}\n                            ></div>\n                        ))}\n                    </div>\n                </>\n            )}\n        </>\n    );\n}\n\n// Sort\nconst sortVisualize = (sortType, array_, array_bar_) => {\n    let animations;\n    if (sortType === \"Bubble Sort\") animations = getBubbleSortAnimations(array_);\n    if (sortType === \"Select Sort\") animations = getSelectSortAnimations(array_);\n    if (sortType === \"Insertion Sort\") animations = getInsertionSortAnimations(array_);\n    if (sortType === \"Quick Sort\") animations = getQuickSortAnimations(array_);\n    if (sortType === \"Merge Sort\") animations = getMergeSortAnimations(array_);\n    if (sortType === \"Heap Sort\") animations = getHeapSortAnimations(array_);\n    let arrayBars = document.getElementsByClassName(array_bar_);\n    for (let i = 0; i < animations.length; i++) {\n        const [barOneIdx, barTwoIdxOrNewHeight, type, colorType] = animations[i];\n        if (type === 'color') {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdxOrNewHeight].style;\n            const color = colorType === 'even' ? 'red' : 'orange';\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            }, i * 3);\n        } else {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            setTimeout(() => {\n                barOneStyle.height = `${barTwoIdxOrNewHeight}px`;\n            }, i * 3);\n        }\n    }\n}","export const getBubbleSortAnimations = (array) => {\n    const animations = [];\n    const array_ = [...array];\n    if (array_.length <= 1) return array_;\n    for (let i = 0; i < array_.length; i++) {\n        for (let j = 0; j < array_.length-i-1; j++) {\n            if (array_[j] > array_[j+1]) {\n                let tmp = array_[j];\n                array_[j] = array_[j+1];\n                array_[j+1] = tmp;\n            } \n\n            animations.push([j, j+1, \"color\", \"even\"]);\n            animations.push([j, j+1, \"color\", \"odd\"]);\n            animations.push([j, array_[j], \"swap\", \"null\"]);\n            animations.push([j+1, array_[j+1], \"swap\", \"null\"]);\n        }\n    }\n    return animations;\n}\n","export const getSelectSortAnimations = (array) => {\n    const animations = [];\n    const array_ = [...array];\n    if (array_.length <= 1) return array_;\n    for (let i = 0; i < array_.length; i++) {\n        let midx = i;\n        for (let j = i+1; j < array_.length; j++) {\n            animations.push([midx, j, \"color\", \"even\"]);\n            animations.push([midx, j, \"color\", \"odd\"]);\n            if(array_[j] < array_[midx]) midx = j;\n        }\n        let tmp = array_[i];\n        array_[i] = array_[midx];\n        array_[midx] = tmp;\n\n        animations.push([i, array_[i], \"swap\", \"null\"]);\n        animations.push([midx, array_[midx], \"swap\", \"null\"]);\n    }\n    return animations;\n}\n","export const getInsertionSortAnimations = (array) => {\n    const animations = [];\n    const array_ = [...array];\n    if (array_.length <= 1) return array_;\n    for (let i = 0; i < array_.length; i++) {\n        let j = i;\n        while ((j > 0) && (array_[j-1] > array_[j])) {\n            animations.push([j-1, j, \"color\", \"even\"]);\n            animations.push([j-1, j, \"color\", \"odd\"]);\n\n            let tmp = array_[j];\n            array_[j] = array_[j-1];\n            array_[j-1] = tmp;\n\n            animations.push([j-1, array_[j-1], \"swap\", \"null\"]);\n            animations.push([j, array_[j], \"swap\", \"null\"]);\n            j--;\n        } \n    }\n    return animations;\n}\n","import React from 'react';\nimport { SortingVisualizer } from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer></SortingVisualizer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}